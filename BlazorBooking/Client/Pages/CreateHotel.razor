@page "/addhotel"
@using BlazorBooking.Client.Services.Hotel;
@using BlazorBooking.Shared.Models.Hotel;
@inject NavigationManager NavigationManager
@inject IHotelService IHotelService

<PageTitle>New Hotel</PageTitle>
<h3>CreateHotel</h3>

<div class="row">
    <div class="col-sm-4">
        <EditForm Model="@hotelDto" OnValidSubmit="AddHotel">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="hotelDto.Name" class="form-control"></InputText>
                <ValidationMessage For="@(() => hotelDto.Name)" />
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">City:</label>
                <InputText id="name" @bind-Value="hotelDto.City" class="form-control"></InputText>
                <ValidationMessage For="@(() => hotelDto.City)" />
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Country:</label>
                <InputText id="name" @bind-Value="hotelDto.Country" class="form-control"></InputText>
                <ValidationMessage For="@(() => hotelDto.Country)" />
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
            <ValidationSummary />
        </EditForm>
    </div>
</div>

@code {
    private HotelDto hotelDto = new HotelDto();

    protected override async Task OnInitializedAsync()
    {
        await AddHotel();
    }

    private async Task AddHotel()
    {
        if (hotelDto.Name != string.Empty)
        {
            hotelDto = await IHotelService.CreateHotel(hotelDto);
            NavigationManager.NavigateTo("/hotels");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/hotels");
    }
}
