@page "/createReservation/{idroom:int}"
@using BlazorBooking.Client.Services.Reservation;
@using BlazorBooking.Client.Services.Room;
@using BlazorBooking.Shared.Models.Reservation;
@using BlazorBooking.Shared.Models.Room;

@inject NavigationManager NavigationManager
@inject IReservationService IReservationService
@inject IRoomService IRoomService
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Create Reservation</PageTitle>

<h3>Create Reservation</h3>

<div class="mb-3">
    @roomName
</div>
<div>
    <img src=" @($"data:image /png;base64,{Convert.ToBase64String(Photo)}")" alt="Zdjęcie" width="300" height="200" />
</div>

<div class="row">
    <div class="col-sm-4">
        <EditForm Model="@reservationDto" OnSubmit="AddReservation">
            
            <div class="mb-3">
                <label for="StartDate" class="form-label">Start Date:</label>
                <InputDate id="StartDate" @bind-Value="reservationDto.StartDate" class="form-control" min="@StartDateCalendar" @onclick="@xd"></InputDate>
            </div>
            <div class="mb-3">
                <label for="EndDate" class="form-label">End Date:</label>
                <InputDate id="EndDate" @bind-Value="reservationDto.EndDate" class="form-control" min="@EndDateCalendar"></InputDate>
            </div>
            <button type="submit" class="btn btn-primary">Confirm</button>
            <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
        </EditForm>
    </div>

</div>

@code {
    [Parameter]
    public int IdRoom { get; set; }
    public string roomName = String.Empty;
    public byte[] Photo = new byte[0];
    public string StartDateCalendar = DateTime.Now.ToString("yyyy-MM-dd");
    public string EndDateCalendar = DateTime.Now.AddDays(1).ToString("yyyy-MM-dd");
    public List<ReservationDto> MyreservationsList = new List<ReservationDto>();
    private ReservationDto reservationDto = new()
    {
            StartDate = DateTime.Now,
            EndDate = DateTime.Today.AddDays(1),
            RoomId = 0,
            UserName = string.Empty
    };
    protected override async Task OnInitializedAsync()
    {
        await GetReservations();
        await AddReservation();
        reservationDto.RoomId = IdRoom;
        var room = await IReservationService.GetRoom(IdRoom);
        roomName = room.Name;
        Photo = await IReservationService.GetResourseImage(room.ImageId ?? 0);
    }

    private async Task AddReservation()
    {
        var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        reservationDto.UserName = user.Identity.Name;

        if (reservationDto.RoomId != 0)
        {
            reservationDto = await IReservationService.CreateRerservation(reservationDto);
            NavigationManager.NavigateTo("/myreservations");
        }
    }
    private async Task GetReservations()
    {
        MyreservationsList = (await IReservationService.GetReservations()).Reservations.Where(x => x.RoomId == IdRoom).ToList();
    }

    public void xd()
    { }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/reservations");
    }
}