@page "/myreservations"
@using BlazorBooking.Client.Services.Reservation;
@using BlazorBooking.Shared.Models.Reservation;
@using BlazorBooking.Shared.Models.Room;
@using Microsoft.AspNetCore.Authorization;
@inject NavigationManager NavigationManager
@inject IReservationService IReservationService
@inject AuthenticationStateProvider authenticationStateProvider
@attribute [Authorize]

<PageTitle>My Reservations</PageTitle>

<h1>My Reservations</h1>

<table class="table table-striped table-bordered bg-light">
    <thead>
        <tr>
            <th>Id</th>
            <th>Start date</th>
            <th>End date</th>
            <th>Room name</th>
            <th>Price per night</th>
        </tr>
    </thead>
    <tbody>
        @if (reservationAndRoomName == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var reservationElement in reservationAndRoomName)
                {
                    <tr>
                        <td>@reservationElement.Id</td>
                        <td>@reservationElement.StartDate</td>
                        <td>@reservationElement.EndDate</td>
                        <td>@reservationElement.NameRoom</td>
                        <td>@reservationElement.PricePerNight</td>
                    </tr>
                }
        }
    </tbody>
</table>

@code {
    public List<ReservationDto> MyreservationsList = new List<ReservationDto>();
    public ReservationAndRoomNameDto reservationAndRoom;
    public RoomDto roomDto;
    public List<ReservationAndRoomNameDto> reservationAndRoomName = new List<ReservationAndRoomNameDto>();
    protected override async Task OnInitializedAsync()
    {
        await GetReservations();
    }
    private async Task GetReservations()
    {
        var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        if (user != null)
        {
            MyreservationsList = (await IReservationService.GetReservations()).Reservations.Where(x => x.UserName == user.Identity.Name).ToList();
        }
        await AddNameRoomToListReservations();
    }
    private async Task AddNameRoomToListReservations()
    {
        foreach (var element in MyreservationsList)
        {
            var roomDto = await IReservationService.GetRoom(element.RoomId ?? 1);
            reservationAndRoom = new ReservationAndRoomNameDto
            {
                    Id = element.Id,
                    StartDate = element.StartDate,
                    EndDate = element.EndDate,
                    NameRoom = roomDto.Name,
                    PricePerNight = roomDto.PricePerNight
            };
            reservationAndRoomName.Add(reservationAndRoom);
        }
    }

}
