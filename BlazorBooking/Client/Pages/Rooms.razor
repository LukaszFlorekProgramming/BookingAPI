@page "/rooms"
@using BlazorBooking.Client.Services.Room;
@using BlazorBooking.Shared.Models.Room;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@inject IRoomService IRoomService
@inject NavigationManager NavigationManager

<PageTitle>Rooms</PageTitle>

<h1>Room List</h1>
<button type="button" class="btn btn-success" @onclick="@AddRoomNavigate">Add Room</button>
<button type="button" class="btn btn-danger" @onclick="@DeleteRoomNavigate">Delete Rooms</button>

<table class="table table-striped table-bordered bg-light">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Capacity</th>
            <th>PricePerNight</th>
            <th>Country</th>
            <th>City</th>
            <th>BuildingNumber</th>
            <th>Id Image</th>
            <th>Update</th>
        </tr>
    </thead>
    <tbody>
        @if (roomsList == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @foreach (var roomElement in roomsList)
            {
                
                    <tr>
                        <td>@roomElement.Id</td>
                        <td>@roomElement.Name</td>
                        <td>@roomElement.Capacity</td>
                        <td>@roomElement.PricePerNight</td>
                        <td>@roomElement.Country</td>
                        <td>@roomElement.City</td>
                        <td>@roomElement.BuildingNumber</td>
                        <td>@roomElement.ImageId</td>
                        <td><a class="btn btn-warning" href="/updateroom/@roomElement.Id">Update</a></td>
                    </tr>
            }
        }
    </tbody>
</table>


@code {
    public List<RoomDto> roomsList = new List<RoomDto>();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetRooms();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
    private async Task GetRooms()
    {
        roomsList = (await IRoomService.GetRooms()).Rooms.ToList();
    }
    private async Task Delete(int id)
    {
        await IRoomService.DeleteRoom(id);
        NavigationManager.NavigateTo("/rooms");
    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/rooms");
    }
    private void AddRoomNavigate()
    {
        NavigationManager.NavigateTo("/addRoom");
    }
    private void DeleteRoomNavigate()
    {
        NavigationManager.NavigateTo("/deleteRoom");
    }
}