@page "/addimage"
@using BookingManagementBlazor.Models.Image;
@using BookingManagementBlazor.Services.Image;
@inject NavigationManager NavigationManager
@inject IImageService IImageService
@inject IJSRuntime JSRuntime;

<PageTitle>Create Image</PageTitle>

<h3>Create Image</h3>




<div class="row">
    <div class="col-sm-4">
        <EditForm Model="@imageDto" OnSubmit="AddImage">
            
            <div class="mb-3">
                <label for="name" class="form-label">Id Room:</label>
                <InputNumber id="name" @bind-Value="imageDto.RoomId" class="form-control"></InputNumber>
            </div>

            <div class="mb-3">
                <label for="name" class="form-label">Image:</label>
                <InputFile id="name" @bind-Value="imageDto.PhotoResource" OnChange="OnInputFileChange" class="form-control"></InputFile>
            </div>
            
            
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
        </EditForm>
    </div>
</div>




@code{
    private ImageDto imageDto = new()
    {
        PhotoResource = null,
        RoomId = 0
    };

    protected override async Task OnInitializedAsync()
    {
        await AddImage();
    }

    private async Task AddImage()
    {
        if (imageDto.RoomId != 0)
        {
            imageDto = await IImageService.CreateImage(imageDto);
            NavigationManager.NavigateTo("/images");
        }
    }
    private void Cancel()
    {
        NavigationManager.NavigateTo("/images");
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using var stream = file.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            imageDto.PhotoResource = ms.ToArray();
        }
    }


    
}
